diff -Naur xen/xen/arch/x86/hvm/rtc.c xen-a/xen/arch/x86/hvm/rtc.c
--- xen/xen/arch/x86/hvm/rtc.c	2013-08-11 06:40:35.341098818 -0600
+++ xen-a/xen/arch/x86/hvm/rtc.c	2013-08-19 21:46:49.802332341 -0600
@@ -93,9 +93,11 @@
     else if ( ++(s->pt_dead_ticks) >= 10 )
     {
         /* VM is ignoring its RTC; no point in running the timer */
+printk("pt off @%d\n", __LINE__);//temp
         destroy_periodic_time(&s->pt);
         s->pt_code = 0;
     }
+else if(s->pt_code) rtc_update_irq(s);//todo?
     if ( !(s->hw.cmos_data[RTC_REG_C] & RTC_IRQF) )
         ret = 0;
     spin_unlock(&s->lock);
@@ -127,6 +129,7 @@
         {
             if ( period_code != s->pt_code )
             {
+printk("pt on: %d\n", period_code);//temp
                 s->pt_code = period_code;
                 period = 1 << (period_code - 1); /* period in 32 Khz cycles */
                 period = DIV_ROUND(period * 1000000000ULL, 32768); /* in ns */
@@ -138,6 +141,7 @@
         }
         /* fall through */
     default:
+printk("pt off @%d\n", __LINE__);//temp
         destroy_periodic_time(&s->pt);
         s->pt_code = 0;
         break;
@@ -464,6 +468,9 @@
             rtc_timer_update(s);
         break;
     case RTC_REG_B:
+printk("B=%02x [A:%02x B:%02x C:%02x pt:%d/%d]\n",//temp
+       data, s->hw.cmos_data[RTC_REG_A], orig, s->hw.cmos_data[RTC_REG_C],//temp
+       s->pt_code, s->pt_dead_ticks);//temp
         if ( data & RTC_SET )
         {
             /* set mode: reset UIP mode */
@@ -487,6 +494,7 @@
          * enabled, raise an interrupt immediately.
          */
         rtc_update_irq(s);
+if((data & RTC_PIE) && !(orig & RTC_PIE)) rtc_timer_update(s);//todo?
         if ( (data & RTC_PIE) && !(orig & RTC_PIE) )
             rtc_timer_update(s);
         if ( (data ^ orig) & RTC_SET )
@@ -642,6 +650,7 @@
             ret |= RTC_UIP;
         break;
     case RTC_REG_C:
+printk("C=%02x pt=%d/%d\n", ret, s->pt_code, s->pt_dead_ticks);//temp
         ret = s->hw.cmos_data[s->hw.cmos_index];
         s->hw.cmos_data[RTC_REG_C] = 0x00;
         if ( (ret & RTC_IRQF) && !rtc_mode_is(s, no_ack) )
@@ -744,9 +753,12 @@
 {
     RTCState *s = domain_vrtc(d);
 
+printk("pt off @%d\n", __LINE__);//temp
     destroy_periodic_time(&s->pt);
     s->pt_code = 0;
     s->pt.source = PTSRC_isa;
+s->hw.cmos_data[RTC_REG_B] &= ~(RTC_PIE|RTC_AIE|RTC_UIE);//todo?
+s->hw.cmos_data[RTC_REG_C] = 0;//todo?
 }
 
 void rtc_init(struct domain *d)
